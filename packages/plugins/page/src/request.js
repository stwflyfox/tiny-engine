/* eslint-disable no-use-before-define */
/* eslint-disable no-console */
/* eslint-disable no-undef */
import axios from 'axios'

var BASE_URL
var LoginInfo
var Token

// var isLocal = location.href.toLowerCase().indexOf('localhost') >= 0 || location.href.indexOf('127.0.') >= 0
// var app = GetQueryString('id')
// switch (app) {
//   case '21':
//   case '14':
//     BASE_URL = 'http://localhost:5006'
//     LoginInfo =
//       app == '21'
//         ? '236CCF4C9C5C7041CC472B1BB846BF3E89F2E72BCDE1BCC6A1870BA50401BF33750DDD5BB7B5A74F6A934C9EAF6738538399B95F39FAF24FBA0E3F5E33E02BB5500636B5D8B97F8A9D6DB754EE0CE3B00A25D5F35D18B3FE71E9A246436F13F16C5D722867036E9D8EF723D3A99FAB1A1D0FFB08879E6F628BEEAAC9B43A97CCAEE3674A806D3291D42F5F1BB8C3CC57F49E6798142C82584C08F50DA818661050C6AD03B0525F7BE88F2847A1BDC43766AE15BCEDB49E72A869D22D363FBE9D5F23CA7046707EE55E05BE93BA4FB8B70C2D454B909D98EB7345566E7780512A5F8F810DBFB6E4D8A63648CB21195016D7FBF2D9B014F2BF0CF9BF7035C9AA61550DBB194DC377CB65CBDFABF4D7310C01F96A5BF259A609E2D2DA4763646E70250BF67B05474A7AA514C9E008C3FFB1FC0E8E1260B1F5E03C16F908F5667111BC238CB0184DCD79D7E2CEF6C0306AFE5FCE4AF968271CF747CC5C410DA9FC1775D64635FB400AF05848454379163AEAB3064228CC62FA5E0F029265045CE660B5C7AE685AE1135C5568E268A5620B5A853908DBE635DF5B4227D95EEA6B5572CD3A1E2524FC7E131F408ED2BD2B3872C08F6ABC82C8B8A0A0C3B3FD84FADDB00792D358CD4AE7588621B0772E45BDA6A75AF8D24AE861D1047D70F5E9FE87292EF7DED832A4A859C21C42FFC0374FA75F90D3FBE7226A273F23FC4A8987F3B6243BF48739B8C2C6845DC0FA7D7371903B2F7853CFE0409054B2C183E4028803EAB0C3D320DFC043B5C2B0440148DEB36DB2AFC143330FC01F3FACFCB385B4CCB88B211CD3D69336776DAEBD07DFCE1BDE475E97381947F9C7DF63F074589C5F409477C4338EE3D021DD2968065936B7A3533CD0AD7CBD0B3379FFF879A69CDB8848E19A5858A182B0F086BDF9D9A0EAFD279521BEDABB901E12CF2AD0709E3B5666E623FA27B201DAB4D8BC74ED2FD53A2139FF13032F02D6BB3D8BD2F7756C7D409464E76678E6F7FE81E085DE300F5996DC3C2A3376044B79E29A45D918BA15B018D607D3286C6AA8175350B42EA817755FB4D9B2C662C4452C4CE031060E504AC2395A5F90D604C1750068FBAFB554D096787E05CC73296C3F1288E753C9F62C77511C9B5BC6D4A14A775FA3D3E78357A8FC6C844841D236F22DCD39DE830E2C6B7EB9FFA532B9089A18FDAC3A0714FA17ECB035BEA102C6C8E7B1FC27C1B8F23E6DC0ED8CBAB1AD6263B53260B7E24CC1D00D1D81A1E1ECB5D22F35A46CC1299971127093E5D4DBC012C45B630B8910DE757132A314215C364F7923025DD3B6577DE00066A316CEE33D69989DE44405346B6072C74328E1150DB05C2617DA9EBE852697B1791B0171B29ACC24379654425BC486F5AAE2290727969C1394AC782EE6ECE77B7176DC3BB07CADD09C75B37B8536F2040FB2136F5ABD0CD2DC2428FCBA71F37EA2EADD5E2F9AB453A43B5B867315F8512A0C3E2D091F8D3985B0174467B5058CE9401973AFC7416EAEAA986F1E3A0CD8D7D5780ADC6CF04A76114A64313810E383E6EC285FB1A479AB2FA4B400C9D9AC98EF86DD9048F715D6'
//         : '236CCF4C9C5C7041CC472B1BB846BF3E89F2E72BCDE1BCC6A1870BA50401BF33750DDD5BB7B5A74F6A934C9EAF6738538399B95F39FAF24FBA0E3F5E33E02BB5500636B5D8B97F8A9D6DB754EE0CE3B00A25D5F35D18B3FE71E9A246436F13F1CA5BE144B2BA5CEC0C46EDA38F8B25A89CF89094850B1EB926300846D5FD00F0C06BED48D3061B2C91BCA30051CCC7788330DCF023988F8312A579A0AD931A950B96BCB6A7351832471EA5EF351740335C2B6362B1E5CD868EAFB877E003C8AE7E0789AF9B0BD95428E2B368B6BEA6CB724054ED9A550645F078FC164329D4C219958750C33E9E604D80A28FDB6B50B1C697F5713EF3414694984180E95ED09AE15B10248D79EF1CAF8E99C78440745B80A844206D1B31A2391055E9F99627D08429A0BE764F9CDFFF463529714EC88DEEE9B4A2F451CADFD3424EC0B7A6E31A4EE31266AA0F2CCE7A873DF9D78E06CEB0E8014C52C4B23ABE807FC069E7BAFFB6EC2E1060141D078F6926919F6109F34BBA8062163E24C519A7C3CE0CCC71A71052C4573DA1A5B9FAF3E0D7350C3BB9999AF8FBA7F27FCB6E43BF4444E3E35E4ACCE1E927574439DD1046DE164327B1C488E222B9AE2311F5EB21D5E0CAF7F3F3F5E5DFD636995E5E01658CA9C9126555E6A002A1FAFCAF5040CA3189C5DD5EA5AB30DD2AE88D71901816EEAC7A2AAB4A3EDBB67FA02F26BD538E51FDD5E86F853D1DD35BC0DB1A6CBCFB276307A38E621A78D619BF86C97EEB2CFBC03D258AB7C55A40F4B33B478ECC9E6A47359188C58B722452AAE6DB7D91F1E8B33AA53FBA5F9B1570FF0E5EEF6CB0C463C979DF05A1ABA10E0B6C7DD280F4F7B838244C982E18F2DC8B33FC82281DD3C1D7D9A38CE8CDEC35CC99DED5E379011C975E0768B04677D00E4A83055BB0C360404416A11CAF7CCA8ADE1567C35060A8D325F69E12BB8549781396A255C2DF80D263E784934564F01AC6064B75B6BB596E1A5E4F831807D339FDA513CDAACB16674D01019BAA97EA507749122F78E8D712DEAA55BBAD8B1504DFBF9982EA32681D78B8B55AB6613143DB1DAC5DD3BA79C8D5763088B1EF8ED39A0DE470C8B9BFBF3CBDC6B543B6B67904EA3A683E54B41A7C820255ABF9D8B9C1D48CBC0A4F13FE1774E503561C3585D42EB003D575C7FB168FF02DC7243536033C5CC6C1CB3C7C465125BA7D6DA0A15AF4D5CC2AE4F1ACAE0CD78AFF12D8C89A790AD16EC37832887AEDF1317A2F4A2319E1631322B151068271D802CFD8573088DDCCD3A66B8BAE1B88F205598BEA1B3282B21D7BCCE67AF905BB61C8EF49FD891DB98882C4B8E5E025BBE4077048AC7FA38664A17B20A54BCFB80754D40027563AE967AA3718CB5AD62B3E02932EA0B14802D3E9EEE3EFC2E76B2097826C0F45708E7F38718351FA1BF3F38F0A29910EC792A0111E77541BAC6266267F207A21B2000FC5A5656AC7BF84F27768D2D12A544DD15D1B5884B2E7B51CA1BD32BCD34AC6B49DA0BC4081FF110A63DAC5D1AA90FF27C781BB6842F86290EF3FD1D649F3E57D6CB64B8E28ECFB72D34A72C0ADD18EEDD6B871949A282715245ABB796CF42886C242804533EAF933A79872438359E041C5E9504B2BF300C6AC8A875C9959DDCED30AA215020DA9CA7E3B63367527F511D64AD16414EA60CD28CB45A5E9000EF08ECFED8B55B7FE40F4A8F2509E1D640CD37EF141AC519DE169F5E8C8724B2764E919FD84311FF6596155D1C073EB135357A1B51DA2C593D2265F9ECD7FADC67C93842432DB929A1A7535EF38E1E2550FF3DF16DC2A1D4D3114122AAFFFD7FAEC09F283E512AF75F5BD63024E7A6881329514DF049D969638E30924CFB087B123C8854676282D1E08A2F7A41C26740A8218BE310C2753F2E72CF2BA35055B7F3067D90EEB44F1AF179C1623B1DAFBD10DC0F7F2FBD935B261CEB562388283E08DDBB225C2E460AD3608CA304F633AB75C21720EAA2F8430616FDBD7938BEF49480466ED01A58CD32A879FEAE180B7A15E546BFD491495852E04135458A89FF94916AD3BECEABAB583E8EEA33D71E8A76C85DA48E151949F427EBDF90ED353BF87927FCC634A2447816F25B827EE416E63E14E2886454C10F3B26249000D2786A48414BB442F185D948B90D835A16A4A04EF7FA0F7377BE5193135248ADD2F17F5BA35D1944952FFBC2001A2CA18B870DC30E5B5FFC4C6918DF6F11F2D79F6CCD8599551587BA512BB6DF703C5489417309EC4651068201B6C560A4361188EA226713F57CF457195268FC450FE10246FD5C6D8E40D6F80799A9F58AF8F38A3247AEADB00DA41584C8AE8A82E65E14AAADAB111F97A0DDDB476F33C38D3B71902A0A1C226C084B5FF71C88BDE7DB3E95A2456D093CC72CBA445283C69C1991BBE884937C027ECAECEB622B7BF7796671CD4C3475FC8202C72C92F6640D2980267D0F110F455CF682C27FB46A6F0712D897C2CFC2836B4F0617DDB859B94F9AAAFFADE6D89A5639BD13ABC13C89D192EF6EF5B6603235001F7EAF73BF86DE20DF6D1BC332E590478FD5F6E272ACF25422484C5BCB138EFE138DEEACF9A7FD1F000EFCBF9F653E73563C7A9EC17F759ABD41C42B31C4439258386A52CCD6BEBDF5B159F909FE27D688CF743498D9DD11F55616ADDD3C0DE209B2AA38B876EFCB3B896CFA250D106B5D9F80F89E63C5ED67B5C0B4EDF6518A601B01C9A5925E1B07FB282A71428E4AFACC6D2A9DA676D508845D89117AB2211D0ADAA90610636FDDECED2ECF2D78DC8323875F6707CCF3F5F3C9091F9A9E40A9D8EDB5DEC3FF2259533CCD4C4A1BBC65AD82F0B89E95213B035C5065884885FFE2A556B6EAB1972813DDE2801B70C228675981EE88228C41BC9CB6997932A4624C4B5475A6E93349558B42C9ECC64BDDEDB06B960909E39EA8B2C0701655DF5FEB679FCF75F91347F23BE26497BCE1B335E9F22A256A61D379A7B594475F067DBF6E4CB798C145AC4FA31140768664A9B10F1FEBB69EF527CCF11502836B0FB62EC29908288582EA77BE52D776D2579499FAD5F2139EA70DE72C80D7680CE399F5B910AD4A74D16BB29AC2E098B3BD596CE5F74F9B9335FEEB07B1B4760D32FFD6F9E344CFD66D20FBB870A0129EC3BC73D375ACA53092C7C62D9A69BA9F6F42A16B3E28E09514075CD862D23CFCAA88D5EB32081BC7D6EB9B3A384C4B82E78342E7D9F892342961D31DE147236350F8F457B43D0F0F981F3C0609538B036191AB7349FE656BA3E7AA1B736F342EB13F323BB2E2A8D15F62BA244184D359E3F0B1329911CF8AE53FF0CAED9C6381E60BE74EB4D764DC2CFE8D0D51FE6919DFF0BF17349E0490FC37324D19AF3C12D88388DF8A37CAE388AE56684A7034BFBF6CB36277A590AFDDE7ABC619F057AD0847FCE5F052EC8606C53E627A2A1EE27'
//     Token =
//       'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJDb21wYW55IjoiU0hRWSIsIkFjY291bnQiOiJhZG1pbiIsImlzcyI6IjkxemQuY24iLCJhdWQiOiI5MXpkLmNuIn0.gjA13OabjUWupREfDKHTiriCIbTBb0CNdZmJLGRYw4Y'
//     break
//   default:
BASE_URL = 'http://localhost:5006'
LoginInfo =
  '236CCF4C9C5C7041CC472B1BB846BF3E89F2E72BCDE1BCC6A1870BA50401BF33750DDD5BB7B5A74F6A934C9EAF6738538399B95F39FAF24FBA0E3F5E33E02BB5500636B5D8B97F8A9D6DB754EE0CE3B00A25D5F35D18B3FE71E9A246436F13F16C5D722867036E9D8EF723D3A99FAB1A1D0FFB08879E6F628BEEAAC9B43A97CC419C4C282193D8FCD7CA1117DC825096324CBC68C9A984CD983A10A4D063FAF664B172357CAB6EA244108C999C9D17677305CDEB0680983122CF0BF8513D63D080A2C5754271BCCF67569F55D3ADF6A4144C6F501AAD036C86FF0D83F75C3FF8732C42CBFA8AC81583B97AEEBDEB63DBC0107949A6D7A172439B402618B513D66085B5973DDACE4BA6B434A48160F0985F5EA0D5E7525BD7E03E4C70A60B902C976285CB7EB1822F4614E06EBEF641FC2F6A0A35DF3F3D57279E8AD8ABDA134393CD5A23D47BABEA85DFFC77B6645ED1027777925C9943097E65FEEBD62D618A817429809654051FC1A39A2D62644943EA6DA9EA7AA607A68F728662156D81162445130A6645F6787FB1CC264D6514777E458F9EE3BA298CF6CB3A0151ABC8EE2C8603F09C372AA05DC18C58397D5ADCE1B00A9320EFC0C7259F26FB42E8C0A3296876765FE726FBF2DCBE3D7D782E38467A9530C3D554AE30427D4109E6AEC3B9DA0103A9AD1FC162248381F6F510D9042A846DAFB3BDF81CC85BCC0941F621A643777E3DE5F456B6099575A115E48CEF76E2F07E8406C96DB696210C164332303DCE3CBBDE8DB65E208A9C12D77B3516268AD9D1D2A20890E926283B75956729F49F8DAA8EFE6C646FD9333D60F279D5E0DF1A238B7729419650543660B3BE92EA2FABFF4FC6CEE75D4E6C0225D2A102DAA631C104CD5DC060B1A44220B67F9D18C0DC84BF2351B199F21BE4834D2428864C3C05DF37A8F6A02C4CA89EC3BAA97BDBB3CA7B459BC855F2AAAD6CF97C67DAD99CB62C7EDE2D83DBFC944A45200F1259989B6ABA43D487F0AB513416B982CAD8C4CCC540BAF32E5BFD9BCE1DCE196FD5FEDE98C37538BEF66CD49226CD321F04B1AABD2D28BB4C386382ADD36458F3F89C3E34AC645CD41EBC56044B351232A6BC71E92EF7E75C016A22266A0511C1CAC18B0B31A1181D8E5F7417C507D8DD87A0F9345EE0E706055E16D636F1D18EFB1B9683F8327E2B8FEA97FA388CE5FFC1AF858A1D9367202BCF865896F84A3633AA166AD7BAC4ADD827561028175990136009008577542BB74BD0026A057B79781BA5D3D78470C960B7CAFF89AD0FE662C8D7F3FDFCA4AE4DCE1499B7081D9E14945B518B571370B0F2FC0703954D9479210B9B52A1AC6131234CA9D12AEFFA36D73563256BBAE55808300F9124C5E9EE9BB648E197469687E06E4659D31CABAFD6169924FC2A967C67141F7C2DAD90B01B697795F37E116A78A310C8C75B40E610202537B62BD025CE9410B84B6E7687AFFAE45EB898310453309A1BF3C9229F60602437995A1E89E85C1DA09DD4E7F916F4ABF85B52867EA75FA601806CBE7EFEB5C4C8D7BF82DC8552947AD5EBDF317F2E4A4F11C30D53BBFD63E3D6FA56AA4CA1D878BA65F06A71ABA839BBC38A9023EDD7CDDB55D1DA27EA28746AC813496B2A92A71702BA18C0081DBEFE9955FDD1088B8AED20108B9FD05B7F96CA917CF97CF8F700363135C978216B174830E58304278A8F835198561E043F78FC0406C9CFEBEEE467F7F07151D25327E32CA6F9B331843B7F1919A1C8FCB8E0C30CFB53216C2B1F6A23921ADBC7EFFDA33C9E480CD1FB5A32DCACCE08309E66917E17C313DDDFE62E66AC7E7A9322016AC165A6ADD00318892E8A6A6CC10325F1084ACF804BED9C47DA42AC27815F2AE7B3E687F390ADB6C801BE0E549DECF2145B093C9EC352A6FB6663C03E4A7B3FAE22D51646168BB3E5B66F8CFCBD75E27BE9AEB9DF23BA7461FCFB9D0E6B8D1DFF24D08D40BC15C6095AE67FEC37C2A4024D3C73106C3678F358C41EFA46F63CEB7378AF66B7814A09B88CCF48B169226F645CD697CBEBF6214FCE2987F8F7BF3578401471EFA24CE76C9431362CCC94C900439FE5C55B20447ACB4B674D7E0F02E3B803B18FEBBCFE077A5F64DC9FFBFB9005B06D6E7D98D0D0C281289E45F75792B93AAB7F753B7F8E68DBB980BDEB01EDBDF6B5407E8B0E0CC39892D16713A4BD9421D92E716071B9257C7AC11295'
Token =
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJDb21wYW55Ijoic2hxeSIsIkFjY291bnQiOiJhZG1pbiIsImlzcyI6IjkxemQuY24iLCJhdWQiOiI5MXpkLmNuIn0.7w0deNde8-nVstfQ61-kXSSvKqvhvy-mCJCVMQ5erEI'
//     break
// }

// function GetQueryString(name) {
//   var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i')
//   var r = window.location.search.substr(1).match(reg)
//   if (r != null) {
//     return decodeURIComponent(r[2])
//   }
//   return null
// }

sessionStorage.setItem('LoginInfo', LoginInfo)

// 跨域认证信息 header 名
const xsrfHeaderName = 'Authorization'

axios.defaults.timeout = 1000 * 60 * 20 //20分钟

axios.defaults.headers.common = {
  // 针对所有axios发送的AJAX都添加的请求头
  Authorization: 'Bearer ' + Token,
  LoginInfo: LoginInfo,
  'Content-Type': 'application/json'
}

axios.interceptors.request.use(
  function (config) {
    // const cryptLoginInfo = sessionStorage.getItem("WMS3LoginInfo")

    // var token = getAuthorization();

    // if (token != undefined) {
    //   config.headers[xsrfHeaderName] = token;

    //   if (cryptLoginInfo != undefined) {
    //     config.headers['LoginInfo'] = cryptLoginInfo;
    //   }

    // }

    //var showWaiting = false;

    //

    //不显示提示
    try {
      if (config.data != undefined) {
        if (config.data.ShowWaiting != undefined && config.data.ShowWaiting == true) {
          showWaiting = true
        }
      }
    } catch (err) {
      console.log(err)
    }

    // if (showWaiting)
    //   layer.load(2, {
    //     shade: 0.01,
    //     content: '<span style="font-size:14px;padding-left:30px">正在处理中,请稍等...</span>',
    //     success: function (layero) {

    //       layero.find('.layui-layer-content').css({
    //         "position": 'fixed',
    //         "left": '-50px',
    //         "top": '-20px',
    //         'background-color': '#ffffff',
    //         'width': '220px',
    //         'height': '70px',
    //         'padding-top': '25px',
    //         'textAlign': 'center',
    //         'backgroundPositionX': '20px',
    //         'backgroundPositionY': '50%',
    //         "border": "1px silver solid",
    //         "vertical-align": "middle",

    //       });
    //     }
    //   });
    // }

    return config
  },
  function (error) {
    // layer.closeAll('loading'); //关闭加载层

    if (error.response != undefined) {
      if (error.response.status == 401) {
        alert(error.response.data.message)
      } else {
        alert(error.response.data.message)
      }
    } else {
      alert('发生异常：' + error.message + ' ' + error.config.url)
    }
    return Promise.reject(error)
  }
)

axios.interceptors.response.use(
  function (response) {
    if (response.data && response.data.data) {
      return response.data.data
    } else if (response.data) {
      return response.data
    } else {
      return response
    }
  },
  function (error) {
    if (error.response != undefined) {
      if (error.response.status == 401) {
        if (error.response.data.message != undefined) {
          alert(error.response.data.message)
        } else {
          alert('接口未授权，将返回登录页!' + ' ' + error.config.url)
        }
      } else {
        alert(error.response.data.message + ' ' + error.config.url)
      }
    } else {
      alert('发生异常：' + error.message + ' ' + error.config.url)
    }

    return Promise.reject(error)
  }
)

// 认证类型
const AUTH_TYPE = {
  BEARER: 'Bearer',
  BASIC: 'basic',
  AUTH1: 'auth1',
  AUTH2: 'auth2'
}

// http method
const METHOD = {
  GET: 'get',
  POST: 'post'
}

/**
 * axios请求
 * @param url 请求地址
 * @param method {METHOD} http method
 * @param params 请求参数
 * @returns {Promise<AxiosResponse<T>>}
 */
async function request(url, method, params) {
  switch (method) {
    case METHOD.GET:
      return axios.get(BASE_URL + url, {
        params
      })
    case METHOD.POST:
      if (params) return axios.post(BASE_URL + url, params)
      else return axios.post(BASE_URL + url)
    default:
      return axios.get(BASE_URL + url, {
        params
      })
  }
}

/**
 * 设置认证信息
 * @param auth {Object}
 * @param authType {AUTH_TYPE} 认证类型，默认：{AUTH_TYPE.BEARER}
 */
function setAuthorization(auth, authType = AUTH_TYPE.BEARER) {
  switch (authType) {
    case AUTH_TYPE.BEARER:
      sessionStorage.setItem(xsrfHeaderName, 'Bearer ' + auth.token)
      break
    case AUTH_TYPE.BASIC:
    case AUTH_TYPE.AUTH1:
    case AUTH_TYPE.AUTH2:
    default:
      break
  }
}

/**
 * 移出认证信息
 * @param authType {AUTH_TYPE} 认证类型
 */
function removeAuthorization(authType = AUTH_TYPE.BEARER) {
  switch (authType) {
    case AUTH_TYPE.BEARER:
      sessionStorage.removeItem(xsrfHeaderName)
      break
    case AUTH_TYPE.BASIC:
    case AUTH_TYPE.AUTH1:
    case AUTH_TYPE.AUTH2:
    default:
      break
  }
}

/**
 * 检查认证信息
 * @param authType
 * @returns {boolean}
 */
function checkAuthorization(authType = AUTH_TYPE.BEARER) {
  switch (authType) {
    case AUTH_TYPE.BEARER:
      if (sessionStorage.getItem(xsrfHeaderName)) {
        return true
      }
      break
    case AUTH_TYPE.BASIC:
    case AUTH_TYPE.AUTH1:
    case AUTH_TYPE.AUTH2:
    default:
      break
  }
  return false
}

/**
 * 加载 axios 拦截器
 * @param interceptors
 * @param options
 */
function loadInterceptors(interceptors, options) {
  const { request, response } = interceptors
  // 加载请求拦截器
  request.forEach((item) => {
    let { onFulfilled, onRejected } = item
    if (!onFulfilled || typeof onFulfilled !== 'function') {
      onFulfilled = (config) => config
    }
    if (!onRejected || typeof onRejected !== 'function') {
      onRejected = (error) => Promise.reject(error)
    }
    axios.interceptors.request.use(
      (config) => onFulfilled(config, options),
      (error) => onRejected(error, options)
    )
  })
  // 加载响应拦截器
  response.forEach((item) => {
    let { onFulfilled, onRejected } = item
    if (!onFulfilled || typeof onFulfilled !== 'function') {
      onFulfilled = (response) => response
    }
    if (!onRejected || typeof onRejected !== 'function') {
      onRejected = (error) => Promise.reject(error)
    }
    axios.interceptors.response.use(
      (response) => onFulfilled(response, options),
      (error) => onRejected(error, options)
    )
  })
}

/**
 * 解析 url 中的参数
 * @param url
 * @returns {Object}
 */
function parseUrlParams(url) {
  const params = {}
  if (!url || url === '' || typeof url !== 'string') {
    return params
  }
  const paramsStr = url.split('?')[1]
  if (!paramsStr) {
    return params
  }
  const paramsArr = paramsStr.replace(/&|=/g, ' ').split(' ')
  for (let i = 0; i < paramsArr.length / 2; i++) {
    const value = paramsArr[i * 2 + 1]
    params[paramsArr[i * 2]] = value === 'true' ? true : value === 'false' ? false : value
  }
  return params
}

export {
  METHOD,
  AUTH_TYPE,
  request,
  setAuthorization,
  removeAuthorization,
  checkAuthorization,
  loadInterceptors,
  parseUrlParams
}
