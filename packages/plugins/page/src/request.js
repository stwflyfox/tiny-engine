/* eslint-disable no-use-before-define */
/* eslint-disable no-console */
/* eslint-disable no-undef */
import axios from 'axios'


var BASE_URL;
var LoginInfo;

var isLocal = location.href.toLowerCase().indexOf('localhost') >= 0 || location.href.indexOf('127.0.') >= 0
var app = GetQueryString('id')
switch (app) {
  case '14':
    BASE_URL = isLocal ?  "http://localhost:5006" : "https://to.91zd.cn"
    LoginInfo
    break;
  default:
    BASE_URL = isLocal ?  "http://localhost:5005" : "https://wms3.91zd.cn"
    LoginInfo = isLocal ? "B9E93192FA20AECD8778D342DD0E707591D8BF15B04AB500D9AF85A847FD0BDA0F6C7876FF9C153E7FF74FA507740381CA137D71E8F0C0F21A92A5CE0A93B40833BF059236853B7A45F0F52B91C361375FF66BECD47A2108FB7F0237703BE0F13A34B58708FE86CC4859C282D8E4A9136F34EFA850D6A0355F118A0472AC0362F2F2D31C5592E15BFE4E27F850607AEF932ECD3B057114E281B0C29D80112141ED454608D64692D211D025F529C3E4E0A8C60D5BFA98CD0792A516B4BA2207A68D8FCECC972C9E62AB117A49590FA6BC59C9C788263869ECFBAD9A416152874FBFB22FE72EDA17F9EA6A69C3353390A0ABEA8A300DF31B2928076797099660F166CBC40F4B8293B0176561AA52EDFBAB52FA283E036ED6C0673DE7327356778F9F2A2573DF44D8444E9F861D09BE90CE2618668BA8BC920BA500941CC00DF98C192DBB0DABBC2AF92E46140096E91413D7F4D4E0FCBE92AE0BCA3CDA045A9BC554E42AA7128020C87D42A44B75AAD262C493C9AB6697E95AAC984308438386BD6DE446B8807573F013B9D6F325D24F5A3AC0B4F7D7CA6D898F9D6D94C13D72AD924273A9A9B18CAAC3925D88E471C44B9B048E668E021F64A58E0EE47BC20282275B2A7B74F219B9DE3A3E33FAA26923AF94BF5ADF6D5866E1E29BFBE340BA42FF7705D69B636A495F8145591CA49221636EDE940A134642FF347B75F53A1F293FE3DB79D79D8EF0AF7A63F9C14B66879845DF9C07D7F50CFAEDE9A5CE1E4BB72683293FE55475CADD7766C4D3643394A70B16FBD60269CEB939575B65A5ADE9E8DE41222F7211C1266F08F9806B6CA483657518F7089A83014205A9EC5DD216A46EB5DE7E21E437D307BEA0388C9676C8C2E1E25AE69CBF699CB8565F8699A0A48E23BFDBA728C67D248E9BC5E181EDD2D26CDBC244B5D274141C2DEC615426F37435E8F406AFB18D9E5961E77297ACBF7C9F6C267E2F5319DD6B899C885DCFB8D12CD40D57E534A07DF55AD19F18C26AACF55184B366C4E88043FBCAEEF8B0FF5337DFC5D6CBCEA226A41A8C16BD7CFCD400BE4300263FF86B3BE6588849B442FC66D18170AE109A5A093608CB374433379BCF646D5EA5293E0C6CD89DF42387E00BABE7AFAC664B5A4D72A15D8518D3588590D3D21DC091FB70FC03AFB34982DCD095F3E4AF417FD6CFBA48DB8D5CA67E01A747EEF86975E6AE1B17B7E56ACFC89EE2583CBE365BD8DD466C0A5ED46D4771F98CDBC5D578E04FD56234554374A3EEAF788870DEF4AC0CDAFE5DC224BD02A0C2640CC7232B3B144F105A43225F280D252BC6FB75370FDB0D84F047B05243BD89970682455B744488CADF5383317FB91D850ECE457A3E04141439B0379112034C26BE9B2357F3ACD7008E4FCB36212D54CE7313C3EE3EC4A39CCEE049F05AAA6BC0D8F870282FE0D9CF662FF9AEB6771677F0E1252D4BEB21E7DD1AEB" 
: "B9E93192FA20AECD8778D342DD0E707591D8BF15B04AB500D9AF85A847FD0BDA0F6C7876FF9C153E7FF74FA507740381CA137D71E8F0C0F21A92A5CE0A93B40833BF059236853B7A45F0F52B91C361375FF66BECD47A2108FB7F0237703BE0F13A34B58708FE86CC4859C282D8E4A9136F34EFA850D6A0355F118A0472AC0362F2F2D31C5592E15BFE4E27F850607AEF932ECD3B057114E281B0C29D80112141ED454608D64692D211D025F529C3E4E0A8C60D5BFA98CD0792A516B4BA2207A68D8FCECC972C9E62AB117A49590FA6BC59C9C788263869ECFBAD9A416152874FBFB22FE72EDA17F9EA6A69C3353390A0ABEA8A300DF31B2928076797099660F166CBC40F4B8293B0176561AA52EDFBAB52FA283E036ED6C0673DE7327356778F9F2A2573DF44D8444E9F861D09BE90CE2618668BA8BC920BA500941CC00DF98C192DBB0DABBC2AF92E46140096E91413D7F4D4E0FCBE92AE0BCA3CDA045A9BC554E42AA7128020C87D42A44B75AAD262C493C9AB6697E95AAC984308438386BD6DE446B8807573F013B9D6F325D24F5A3AC0B4F7D7CA6D898F9D6D94C13D72AD924273A9A9B18CAAC3925D88E471C44B9B048E668E021F64A58E0EE47BC20282275B2A7B74F219B9DE3A3E33FAA26923AF94BF5ADF6D5866E1E29BFBE340BA42FF7705D69B636A495F8145591CA49221636EDE940A134642FF347B75F53A1F293FE3DB79D79D8EF0AF7A63F9C14B66879845DF9C07D7F50CFAEDE9A5CE1E4BB72683293FE55475CADD7766C4D3643394A70B16FBD60269CEB939575B65A5ADE9E8DE41222F7211C1266F08F9806B6CA483657518F7089A83014205A9EC5DD216A46EB5DE7E21E437D307BEA0388C9676C8C2E1E25AE69CBF699CB8565F8699A0A48E23BFDBA728C67D248E9BC5E181EDD2D26CDBC244B5D274141C2DEC615426F37435E8F406AFB18D9E5961E77297ACBF7C9F6C267E2F5319DD6B899C885DCFB8D12CD40D57E534A07DF55AD19F18C26AACF55184B366C4E88043FBCAEEF8B0FF5337DFC5D6CBCEA226A41A8C16BD7CFCD400BE4300263FF86B3BE6588849B442FC66D18170AE109A5A093608CB374433379BCF646D5EA5293E0C6CD89DF42387E00BABE7AFAC664B5A4D72A15D8518D3588590D3D21DC091FB70FC03AFB34982DCD095F3E4AF417FD6CFBA48DB8D5CA67E01A747EEF86975E6AE1B17B7E56ACFC89EE2583CBE365BD8DD466C0A5ED46D4771F98CDBC5D578E04FD562345543C27F4B672FA84654A376DDC0C798C9852A18727D13D80EF5CB0DE0B7C602FB3A5032A6629FFE700457EA38D5A1D0426E8AA3263D0FFB25C1FBA4477ADFF6F2EF28154DF28F15E92D0621049557F6F9A53437EFF584378872ACD3B8EE650BF1A6AB20728DF84367E359DEB077BDA2FD3CF1A33591B7FD72602FE56D08387C0916CD3D59B8E8CF27668233DF491C637606";
    break;
}

function GetQueryString(name) {
  var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
  var r = window.location.search.substr(1).match(reg);
  if (r != null) {
    return (decodeURIComponent(r[2]));
  }
  return null;
}

// 跨域认证信息 header 名
const xsrfHeaderName = 'Authorization'

axios.defaults.timeout = 1000 * 60 * 20 //20分钟
axios.defaults.withCredentials = true
axios.defaults.xsrfHeaderName = xsrfHeaderName
axios.defaults.xsrfCookieName = xsrfHeaderName

axios.defaults.headers.common = { // 针对所有axios发送的AJAX都添加的请求头    
  xsrfHeaderName: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJDb21wYW55Ijoic2hxeSIsIkFjY291bnQiOiJhZG1pbiIsImlzcyI6IjkxemQuY24iLCJhdWQiOiI5MXpkLmNuIn0.7w0deNde8-nVstfQ61-kXSSvKqvhvy-mCJCVMQ5erEI",
  'LoginInfo': LoginInfo,
  'Content-Type': 'application/json'
}

axios.interceptors.request.use(function (config) {
  // const cryptLoginInfo = sessionStorage.getItem("WMS3LoginInfo")


  // var token = getAuthorization();


  // if (token != undefined) {
  //   config.headers[xsrfHeaderName] = token;

  //   if (cryptLoginInfo != undefined) {
  //     config.headers['LoginInfo'] = cryptLoginInfo;
  //   }

  // }



  var showWaiting = false;


  // 

  //不显示提示
  try {
    if (config.data != undefined) {
      if (config.data.ShowWaiting != undefined && config.data.ShowWaiting == true) {
        showWaiting = true;
      }
    }
  } catch (err) { console.log(err) }


  if (showWaiting)
    layer.load(2, {
      shade: 0.01,
      content: '<span style="font-size:14px;padding-left:30px">正在处理中,请稍等...</span>',
      success: function (layero) {

        layero.find('.layui-layer-content').css({
          "position": 'fixed',
          "left": '-50px',
          "top": '-20px',
          'background-color': '#ffffff',
          'width': '220px',
          'height': '70px',
          'padding-top': '25px',
          'textAlign': 'center',
          'backgroundPositionX': '20px',
          'backgroundPositionY': '50%',
          "border": "1px silver solid",
          "vertical-align": "middle",

        });
      }
    });
  // }


  return config
}, function (error) {
  layer.closeAll('loading'); //关闭加载层

  if (error.response != undefined) {
    if (error.response.status == 401) {
      layer.alert(error.response.data.message, {
        title: '发生异常' + error.response.data.code,
        skin: 'layui-layer-molv'
      }, function () {
        logout();
      });
    } else {
      layer.alert(error.response.data.message + " " + error.config.url, {
        title: '发生异常' + error.response.data.code,
        skin: 'layui-layer-molv'
      });
    }
  } else {
    layer.alert('发生异常：' + error.message + " " + error.config.url, {
      title: '网络异常',
      skin: 'layui-layer-molv'
    })
  }
  return Promise.reject(error)
});

axios.interceptors.response.use(function (response) {
  layer.closeAll('loading'); //关闭加载层

  if (response.data && response.data.data)
  {
    return response.data.data;
  }
  else if (response.data)
  {
    return response.data;
  }
  else
  {
    return response 
  } 
}, function (error) {
  layer.closeAll('loading'); //关闭加载层

  if (error.response != undefined) {
    if (error.response.status == 401) {
      if (error.response.data.message != undefined) {
        layer.alert(error.response.data.message, {
          title: '发生异常' + error.response.data.code,
          skin: 'layui-layer-molv'
        }, function () {
          logout();
        });
      }
      else {
        layer.alert("接口未授权，将返回登录页!" + " " + error.config.url, {
          title: '发生异常',
          skin: 'layui-layer-molv'
        }, function () {
          logout();
        });
      }
    } else {
      layer.alert(error.response.data.message + " " + error.config.url, {
        title: '发生异常' + error.response.data.code,
        skin: 'layui-layer-molv'
      });
    }
  } else {
    layer.alert('发生异常：' + error.message + " " + error.config.url, {
      title: '网络异常',
      skin: 'layui-layer-molv'
    })
  }

  return Promise.reject(error)
})



// 认证类型
const AUTH_TYPE = {
  BEARER: 'Bearer',
  BASIC: 'basic',
  AUTH1: 'auth1',
  AUTH2: 'auth2',
}

// http method
const METHOD = {
  GET: 'get',
  POST: 'post'
}

/**
 * axios请求
 * @param url 请求地址
 * @param method {METHOD} http method
 * @param params 请求参数
 * @returns {Promise<AxiosResponse<T>>}
 */
async function request(url, method, params) {
  switch (method) {
    case METHOD.GET:
      return axios.get(BASE_URL + url, {
        params
      })
    case METHOD.POST:
      if (params)
        return axios.post(BASE_URL + url, params)
      else
        return axios.post(BASE_URL + url)
    default:
      return axios.get(BASE_URL + url, {
        params
      })
  }
}

/**
 * 设置认证信息
 * @param auth {Object}
 * @param authType {AUTH_TYPE} 认证类型，默认：{AUTH_TYPE.BEARER}
 */
function setAuthorization(auth, authType = AUTH_TYPE.BEARER) {
  switch (authType) {
    case AUTH_TYPE.BEARER:
      sessionStorage.setItem(xsrfHeaderName, "Bearer " + auth.token)
      break
    case AUTH_TYPE.BASIC:
    case AUTH_TYPE.AUTH1:
    case AUTH_TYPE.AUTH2:
    default:
      break
  }
}


//获取认证信息
function getAuthorization(authType = AUTH_TYPE.BEARER) {
  switch (authType) {
    case AUTH_TYPE.BEARER:
      return sessionStorage.getItem(xsrfHeaderName)
    case AUTH_TYPE.BASIC:
    case AUTH_TYPE.AUTH1:
    case AUTH_TYPE.AUTH2:
    default:
      break
  }
}

/**
 * 移出认证信息
 * @param authType {AUTH_TYPE} 认证类型
 */
function removeAuthorization(authType = AUTH_TYPE.BEARER) {
  switch (authType) {
    case AUTH_TYPE.BEARER:
      sessionStorage.removeItem(xsrfHeaderName)
      break
    case AUTH_TYPE.BASIC:
    case AUTH_TYPE.AUTH1:
    case AUTH_TYPE.AUTH2:
    default:
      break
  }
}

/**
 * 检查认证信息
 * @param authType
 * @returns {boolean}
 */
function checkAuthorization(authType = AUTH_TYPE.BEARER) {
  switch (authType) {
    case AUTH_TYPE.BEARER:
      if (sessionStorage.getItem(xsrfHeaderName)) {
        return true
      }
      break
    case AUTH_TYPE.BASIC:
    case AUTH_TYPE.AUTH1:
    case AUTH_TYPE.AUTH2:
    default:
      break
  }
  return false
}

/**
 * 加载 axios 拦截器
 * @param interceptors
 * @param options
 */
function loadInterceptors(interceptors, options) {
  const {
    request,
    response
  } = interceptors
  // 加载请求拦截器
  request.forEach(item => {
    let {
      onFulfilled,
      onRejected
    } = item
    if (!onFulfilled || typeof onFulfilled !== 'function') {
      onFulfilled = config => config
    }
    if (!onRejected || typeof onRejected !== 'function') {
      onRejected = error => Promise.reject(error)
    }
    axios.interceptors.request.use(
      config => onFulfilled(config, options),
      error => onRejected(error, options)
    )
  })
  // 加载响应拦截器
  response.forEach(item => {
    let {
      onFulfilled,
      onRejected
    } = item
    if (!onFulfilled || typeof onFulfilled !== 'function') {
      onFulfilled = response => response
    }
    if (!onRejected || typeof onRejected !== 'function') {
      onRejected = error => Promise.reject(error)
    }
    axios.interceptors.response.use(
      response => onFulfilled(response, options),
      error => onRejected(error, options)
    )
  })
}

/**
 * 解析 url 中的参数
 * @param url
 * @returns {Object}
 */
function parseUrlParams(url) {
  const params = {}
  if (!url || url === '' || typeof url !== 'string') {
    return params
  }
  const paramsStr = url.split('?')[1]
  if (!paramsStr) {
    return params
  }
  const paramsArr = paramsStr.replace(/&|=/g, ' ').split(' ')
  for (let i = 0; i < paramsArr.length / 2; i++) {
    const value = paramsArr[i * 2 + 1]
    params[paramsArr[i * 2]] = value === 'true' ? true : (value === 'false' ? false : value)
  }
  return params
}

export {
  METHOD,
  AUTH_TYPE,
  request,
  setAuthorization,
  removeAuthorization,
  checkAuthorization,
  loadInterceptors,
  parseUrlParams
}